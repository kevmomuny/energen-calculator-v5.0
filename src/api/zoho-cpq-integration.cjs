/**
 * Zoho CPQ Integration Module
 * Enhanced version with full CPQ support and calculator pricing integration
 *
 * This module extends zoho-bid-integration.cjs with:
 * 1. CPQ product catalog integration (uses zoho-product-mapping.cjs)
 * 2. Multi-dimensional pricing (kW, cylinders, fuel type, injector type)
 * 3. Calculator-driven pricing (100% accuracy from calculation engine)
 * 4. Transparent line items showing per-visit costs and frequency
 * 5. Custom fields for audit trail and reporting
 *
 * @module zoho-cpq-integration
 * @version 2.0.0-cpq
 */

const axios = require('axios');
const { createOrUpdateAccount, createOrUpdateContact, uploadLogoAttachment } = require('./zoho-bid-integration.cjs');

// Load product ID mapping (generated by zoho-cpq-setup.cjs)
let PRODUCT_MAP;
try {
  PRODUCT_MAP = require('../../zoho-product-mapping.cjs');
} catch (error) {
  console.warn('‚ö†Ô∏è  Product mapping not found. Run zoho-cpq-setup.cjs first.');
  PRODUCT_MAP = {};
}

/**
 * Extract generator specifications for pricing
 * @param {Object} generator - Generator data from quote
 * @returns {Object} Specifications needed for pricing
 */
function extractGeneratorSpecs(generator) {
  return {
    kwRating: generator.kw || generator.kwRating || 0,
    kwRange: generator.kwRange || determineKwRange(generator.kw),
    cylinders: generator.cylinders || generator.cylinderCount || null,
    fuelType: generator.fuelType || generator.fuel_type || 'Diesel',
    injectorType: generator.injectorType || generator.injector_type || null,
    model: generator.model || 'Unknown Model',
    serialNumber: generator.serialNumber || generator.serial_number || null
  };
}

/**
 * Determine kW range from kW rating
 * Matches calculation engine logic
 */
function determineKwRange(kw) {
  const kwNum = Number(kw);

  if (kwNum <= 14) return '2-14';
  if (kwNum <= 30) return '15-30';
  if (kwNum <= 150) return '35-150';
  if (kwNum <= 250) return '151-250';
  if (kwNum <= 400) return '251-400';
  if (kwNum <= 500) return '401-500';
  if (kwNum <= 670) return '501-670';
  if (kwNum <= 1050) return '671-1050';
  if (kwNum <= 1500) return '1051-1500';
  return '1501-2050';
}

/**
 * Build product code with multi-dimensional attributes
 * Examples:
 *   SVC-A-35-150-Q      (Service A, 35-150 kW, Quarterly)
 *   SVC-F-6CYL-PN-A     (Service F, 6 cylinders, Pop Nozzle, Annual)
 *   SVC-G-8CYL-NG-A     (Service G, 8 cylinders, Natural Gas, Annual)
 */
function buildProductCode(serviceCode, generatorSpecs, frequency) {
  let code = `SVC-${serviceCode}`;

  // Add kW range for kW-based services (A, B, C, E, H, I, J)
  if (['A', 'B', 'C', 'E', 'H', 'I', 'J'].includes(serviceCode)) {
    code += `-${generatorSpecs.kwRange.replace(/\s/g, '')}`;
  }

  // Add cylinder count for tune-ups (F, G)
  if (['F', 'G'].includes(serviceCode) && generatorSpecs.cylinders) {
    code += `-${generatorSpecs.cylinders}CYL`;
  }

  // Add injector type for diesel tune-ups (F)
  if (serviceCode === 'F' && generatorSpecs.injectorType) {
    const injType = generatorSpecs.injectorType.toLowerCase().includes('unit') ? 'UI' : 'PN';
    code += `-${injType}`;
  }

  // Add fuel type abbreviation for gas services (G)
  if (serviceCode === 'G') {
    const fuelMap = {
      'Natural Gas': 'NG',
      'Propane': 'PROP',
      'Bi-Fuel': 'BF'
    };
    code += `-${fuelMap[generatorSpecs.fuelType] || 'NG'}`;
  }

  // Add frequency code
  const freqMap = {
    4: 'Q',   // Quarterly
    2: 'SA',  // Semi-Annual
    1: 'A',   // Annual
    0.33: 'T', // Triennial (every 3 years)
    0.2: 'P'  // Pentennial (every 5 years)
  };
  code += `-${freqMap[frequency] || 'A'}`;

  return code;
}

/**
 * Build descriptive product name
 */
function buildProductName(service, generatorSpecs, frequency) {
  let name = service.name || `Service ${service.code}`;

  // Add kW range for kW-based services
  if (['A', 'B', 'C', 'E', 'H', 'I', 'J'].includes(service.code)) {
    name += ` (${generatorSpecs.kwRange} kW)`;
  }

  // Add cylinder/injector info for tune-ups
  if (service.code === 'F' && generatorSpecs.cylinders) {
    const injType = generatorSpecs.injectorType?.includes('Unit') ? 'Unit Injectors' : 'Pop Nozzle';
    name += ` (${generatorSpecs.cylinders} cyl, ${injType})`;
  }

  if (service.code === 'G' && generatorSpecs.cylinders) {
    name += ` (${generatorSpecs.cylinders} cyl, ${generatorSpecs.fuelType})`;
  }

  // Add frequency
  const freqNames = {
    4: 'Quarterly',
    2: 'Semi-Annual',
    1: 'Annual',
    0.33: 'Triennial',
    0.2: 'Pentennial'
  };
  name += ` - ${freqNames[frequency] || 'Annual'}`;

  return name;
}

/**
 * Build transparent line item description
 */
function buildLineItemDescription(service, generatorSpecs, frequency, calculationBreakdown) {
  const parts = [];

  parts.push(`${service.name} for ${generatorSpecs.kwRating}kW generator (${generatorSpecs.kwRange} range)`);

  if (calculationBreakdown) {
    parts.push('\nBreakdown per visit:');
    if (calculationBreakdown.laborHours) {
      parts.push(`  ‚Ä¢ Labor: ${calculationBreakdown.laborHours} hours @ $${calculationBreakdown.laborRate || 180}/hr`);
    }
    if (calculationBreakdown.mobilization) {
      parts.push(`  ‚Ä¢ Mobilization: ${calculationBreakdown.mobilization} hours`);
    }
    if (calculationBreakdown.partsCost) {
      parts.push(`  ‚Ä¢ Parts & Materials: $${calculationBreakdown.partsCost.toFixed(2)}`);
    }
    if (calculationBreakdown.oilGallons) {
      parts.push(`  ‚Ä¢ Oil: ${calculationBreakdown.oilGallons} gallons`);
    }
    if (calculationBreakdown.coolantGallons) {
      parts.push(`  ‚Ä¢ Coolant: ${calculationBreakdown.coolantGallons} gallons`);
    }
  }

  if (generatorSpecs.model !== 'Unknown Model') {
    parts.push(`\nGenerator: ${generatorSpecs.model}`);
  }
  if (generatorSpecs.serialNumber) {
    parts.push(`Serial #: ${generatorSpecs.serialNumber}`);
  }

  return parts.join('\n');
}

/**
 * Find or create CPQ product with multi-dimensional attributes
 * @param {Object} zohoConfig - Zoho configuration
 * @param {Object} service - Service data from calculator
 * @param {Object} generatorSpecs - Generator specifications
 * @param {number} frequency - Service frequency (visits per year)
 * @param {Object} logger - Logger instance
 * @returns {Promise<string>} Product ID
 */
async function findOrCreateCPQProduct(zohoConfig, service, generatorSpecs, frequency, logger) {
  try {
    const productCode = buildProductCode(service.code, generatorSpecs, frequency);
    const productName = buildProductName(service, generatorSpecs, frequency);

    // Search for existing product by Product_Code
    const searchCriteria = `(Product_Code:equals:${productCode})`;
    const searchUrl = `${zohoConfig.apiUrl}/crm/v6/Products/search?criteria=${encodeURIComponent(searchCriteria)}`;

    const searchResponse = await axios.get(searchUrl, {
      headers: {
        'Authorization': `Zoho-oauthtoken ${zohoConfig.accessToken}`
      }
    });

    // If product exists, return its ID
    if (searchResponse.data?.data && searchResponse.data.data.length > 0) {
      const productId = searchResponse.data.data[0].id;
      logger.info(`‚úÖ Found existing CPQ product: ${productCode} (ID: ${productId})`);
      return productId;
    }

    // Product doesn't exist - create it with CPQ custom fields
    logger.info(`üì¶ Creating new CPQ product: ${productCode}`);

    const newProduct = {
      data: [{
        Product_Name: productName,
        Product_Code: productCode,
        Unit_Price: service.perVisitPrice || service.price || 0,
        Description: service.description || '',
        Product_Active: true,
        Product_Category: 'Generator Services',
        Taxable: true,

        // CPQ Custom Fields (created by zoho-cpq-setup.cjs)
        Service_Code: service.code,
        kW_Range: generatorSpecs.kwRange,
        Cylinder_Count: generatorSpecs.cylinders ? String(generatorSpecs.cylinders) : null,
        Fuel_Type: generatorSpecs.fuelType,
        Injector_Type: generatorSpecs.injectorType,
        Pricing_Type: determinePricingType(service.code),
        Default_Frequency: frequency,
        Labor_Hours_Included: service.laborHours || null,
        Mobilization_Hours: service.mobilization || null,
        Parts_Cost_Base: service.partsCost || null
      }]
    };

    // Remove null values
    Object.keys(newProduct.data[0]).forEach(key => {
      if (newProduct.data[0][key] === null) {
        delete newProduct.data[0][key];
      }
    });

    const createResponse = await axios.post(
      `${zohoConfig.apiUrl}/crm/v6/Products`,
      newProduct,
      {
        headers: {
          'Authorization': `Zoho-oauthtoken ${zohoConfig.accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const productId = createResponse.data?.data?.[0]?.details?.id;

    if (!productId) {
      throw new Error('Failed to get product ID from create response');
    }

    logger.info(`‚úÖ Created CPQ product: ${productCode} (ID: ${productId})`);
    return productId;

  } catch (error) {
    logger.error('‚ùå CPQ product lookup/creation failed:', error.message);
    throw new Error(`CPQ product lookup failed: ${error.message}`);
  }
}

/**
 * Find CUSTOM service product in Zoho (for Product Configurator)
 * @param {Object} zohoConfig - Zoho configuration
 * @param {Object} logger - Logger instance
 * @returns {Promise<string|null>} Product ID or null
 */
async function findCustomServiceProduct(zohoConfig, logger) {
  try {
    const searchCriteria = '(Product_Code:equals:SVC-CUSTOM)';
    const searchUrl = `${zohoConfig.apiUrl}/crm/v6/Products/search?criteria=${encodeURIComponent(searchCriteria)}`;

    const searchResponse = await axios.get(searchUrl, {
      headers: {
        'Authorization': `Zoho-oauthtoken ${zohoConfig.accessToken}`
      }
    });

    if (searchResponse.data?.data && searchResponse.data.data.length > 0) {
      const productId = searchResponse.data.data[0].id;
      logger.info(`‚úÖ Found CUSTOM service product (ID: ${productId})`);
      return productId;
    }

    logger.warn('‚ö†Ô∏è  CUSTOM service product not found in Zoho');
    return null;

  } catch (error) {
    logger.error('‚ùå Error searching for CUSTOM service product:', error.message);
    return null;
  }
}

/**
 * Determine pricing type from service code
 */
function determinePricingType(serviceCode) {
  if (['A', 'B', 'C', 'E', 'H', 'I', 'J'].includes(serviceCode)) {
    return 'kW-Based';
  }
  if (serviceCode === 'F') {
    return 'Cylinder-Based-Diesel';
  }
  if (serviceCode === 'G') {
    return 'Cylinder-Based-Gas';
  }
  if (serviceCode === 'D') {
    return 'Flat-Rate';
  }
  return 'Custom';
}

/**
 * Create CPQ quote with calculator-driven pricing
 * @param {Object} zohoConfig - Zoho configuration
 * @param {string} accountId - Zoho account ID
 * @param {string} contactId - Zoho contact ID
 * @param {Object} quoteData - Complete quote data WITH calculator results
 * @param {Object} customerData - Customer information for quote metadata
 * @param {Object} logger - Logger instance
 * @returns {Promise<Object>} Quote result with id and quoteNumber
 */
async function createCPQQuote(zohoConfig, accountId, contactId, quoteData, customerData, logger) {
  logger.info('üìã Creating Zoho CPQ quote with calculator pricing', { accountId, contactId });

  try {
    // Generate quote number
    const timestamp = Date.now();
    const quoteNumber = quoteData.metadata?.quoteNumber || `E-${new Date().getFullYear()}-${String(timestamp).slice(-4)}`;

    // Extract generators (can be multiple units)
    const generators = Array.isArray(quoteData.generators)
      ? quoteData.generators
      : [quoteData.generators].filter(Boolean);

    if (generators.length === 0) {
      throw new Error('No generator data found in quote');
    }

    // Build CPQ line items with calculator pricing
    const lineItems = [];
    const warnings = []; // Collect non-fatal warnings

    // Process services from calculator output
    // Services come as complete objects with embedded pricing
    const servicesArray = quoteData.services;

    if (servicesArray && Array.isArray(servicesArray)) {
      for (const serviceData of servicesArray) {
        try {
          // Get generator specs (use first generator if multiple)
          const generatorSpecs = extractGeneratorSpecs(generators[0]);

          // Extract service code - handle both object and string formats
          const serviceCode = typeof serviceData === 'string' ? serviceData : serviceData.code;

          // For object format, pricing is embedded directly
          const service = typeof serviceData === 'object' ? {
            code: serviceCode,
            name: serviceData.name || `Service ${serviceCode}`,
            description: serviceData.description || '',
            perVisitPrice: serviceData.perVisitPrice || serviceData.price || 0,
            frequency: serviceData.frequency || 1,
            laborHours: serviceData.laborHours || 0,
            partsCost: serviceData.partsCost || 0,
            laborCost: serviceData.laborCost || 0
          } : null;

          // If string format, try to find in serviceBreakdown (legacy support)
          if (!service) {
            const serviceBreakdown = quoteData.calculation?.serviceBreakdown || {};
            const serviceKey = Object.keys(serviceBreakdown).find(key =>
              key === serviceCode || key.startsWith(serviceCode + ' -')
            );

            const breakdownData = serviceKey ? serviceBreakdown[serviceKey] : null;

            if (!breakdownData) {
              logger.warn(`‚ö†Ô∏è  No pricing data found for service ${serviceCode}`);
              continue;
            }

            // Extract pricing and frequency from calculator output
            const totalCost = breakdownData.totalCost || breakdownData.total || 0;
            const frequency = breakdownData.frequency || 1;
            const perVisitPrice = frequency > 0 ? totalCost / frequency : totalCost;

            // Build service object for CPQ functions
            service = {
              code: serviceCode,
              name: breakdownData.name || `Service ${serviceCode}`,
              description: breakdownData.description || '',
              perVisitPrice: perVisitPrice,
              frequency: frequency,
              laborHours: breakdownData.laborHours || 0,
              partsCost: breakdownData.partsCost || 0,
              laborCost: breakdownData.laborCost || 0
            };
          }

          // Calculate total cost from service data
          const totalCost = (service.perVisitPrice || service.price || 0) * service.frequency;
          const perVisitPrice = service.perVisitPrice || service.price || 0;

          // Get or create CPQ product
          const productId = await findOrCreateCPQProduct(
            zohoConfig,
            service,
            generatorSpecs,
            service.frequency,
            logger
          );

          // Build transparent description
          const description = buildLineItemDescription(
            service,
            generatorSpecs,
            service.frequency,
            serviceData // Pass original service data for breakdown
          );

          // Create line item with calculator pricing
          lineItems.push({
            product: { id: productId },
            quantity: service.frequency, // Frequency becomes quantity
            list_price: perVisitPrice,
            total: totalCost,
            Description: description,
            Discount: 0,

            // Custom line item fields (if available)
            kW_Range: generatorSpecs.kwRange,
            Service_Code: serviceCode
          });

          logger.info(`‚úÖ Added line item: ${serviceCode} - ${service.frequency}x @ $${perVisitPrice.toFixed(2)} = $${totalCost.toFixed(2)}`);

        } catch (error) {
          logger.warn(`‚ö†Ô∏è  Skipping service ${serviceCode} due to error:`, error.message);
        }
      }
    }

    // Process CUSTOM services (Product Configurator with dynamic pricing)
    if (quoteData.customServices && Object.keys(quoteData.customServices).length > 0) {
      try {
        // CUSTOM services use Product Configurator - each entry becomes a line item
        const customEntries = quoteData.customServices.CUSTOM || [];

        if (Array.isArray(customEntries) && customEntries.length > 0) {
          logger.info(`üì¶ Processing ${customEntries.length} custom service entries`);

          for (const entry of customEntries) {
            try {
              // Get or use the CUSTOM product ID (created by zoho-setup-custom-product-configurator.cjs)
              const customProductId = PRODUCT_MAP.CUSTOM_PRODUCT_ID || await findCustomServiceProduct(zohoConfig, logger);

              if (!customProductId) {
                logger.warn('‚ö†Ô∏è  CUSTOM product not found - run zoho-setup-custom-product-configurator.cjs first');
                continue;
              }

              // Build line item with Product Configurator data
              const customLineItem = {
                product: { id: customProductId },
                quantity: 1,
                list_price: entry.cost || 0,
                Description: entry.description || 'Custom Service',
                Discount: 0,

                // Product Configurator custom fields (for Zoho CPQ dynamic pricing)
                Service_Description: entry.description || 'Custom Service',
                Labor_Hours: entry.laborHours || 0,
                Labor_Rate: 180.00, // Default labor rate (can be customized per entry)
                Parts_Cost: entry.partsCost || 0,
                Calculated_Total: entry.cost || 0
              };

              lineItems.push(customLineItem);

              logger.info(`‚úÖ Added custom service: "${entry.description}" - $${(entry.cost || 0).toFixed(2)}`);

            } catch (error) {
              logger.warn('‚ö†Ô∏è  Skipping custom service entry due to error:', error.message);
            }
          }
        }
      } catch (error) {
        logger.warn('‚ö†Ô∏è  Error processing CUSTOM services:', error.message);
      }
    }

    // Add distance/travel charge if present
    if (quoteData.calculation?.distanceCharge && quoteData.calculation.distanceCharge > 0) {
      try {
        const travelService = {
          code: 'TRAVEL',
          name: 'Travel/Distance Charge',
          price: quoteData.calculation.distanceCharge,
          perVisitPrice: quoteData.calculation.distanceCharge,
          description: `Travel charge for ${quoteData.calculation.distance || 0} miles @ $${quoteData.calculation.mileageRate || 0.67}/mile`
        };

        const travelProductId = await findOrCreateCPQProduct(
          zohoConfig,
          travelService,
          extractGeneratorSpecs(generators[0]),
          1,
          logger
        );

        lineItems.push({
          product: { id: travelProductId },
          quantity: 1,
          list_price: quoteData.calculation.distanceCharge,
          Description: travelService.description,
          Discount: 0
        });
      } catch (error) {
        logger.warn('‚ö†Ô∏è  Skipping travel charge:', error.message);
      }
    }

    // If no line items, throw error (don't create generic service)
    if (lineItems.length === 0) {
      throw new Error('No valid line items to create quote');
    }

    // Calculate totals from calculator output
    const subtotal = quoteData.calculation?.subtotal || lineItems.reduce((sum, item) => sum + (item.total || item.list_price), 0);

    // Use live tax rate if available, otherwise use calculator tax
    const taxRate = quoteData.calculation?.taxRate || quoteData.calculation?.actualTaxRate || 0.0925;
    const tax = quoteData.calculation?.salesTax || (subtotal * taxRate);

    // Check if prevailing wage applies (tax-exempt)
    const isPrevailingWage = quoteData.calculation?.prevailingWageApplied || false;
    const adjustedTax = isPrevailingWage ? 0 : tax;

    const total = quoteData.calculation?.total || (subtotal + adjustedTax);

    // Prepare CPQ quote payload with advanced features
    const quotePayload = {
      Subject: `Generator Service Quote - ${generators.length} Unit(s) - ${customerData?.companyName || 'Customer'}`,
      Quote_Number: quoteNumber,
      Account_Name: accountId,
      Contact_Name: contactId,
      Valid_Till: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days
      Product_Details: lineItems,
      Sub_Total: subtotal,
      Tax: adjustedTax,
      Grand_Total: total,
      Description: buildCPQQuoteDescription(quoteData, generators, customerData, {
        taxRate,
        isPrevailingWage,
        mobilizationStackingApplied: quoteData.calculation?.mobilizationStackingApplied,
        mobilizationDiscount: quoteData.calculation?.mobilizationDiscount,
        actualTaxRate: quoteData.calculation?.actualTaxRate
      }),
      Quote_Stage: 'Draft',
      Team: 'Energen Sales',
      Adjustment: 0,
      Discount: 0
    };

    logger.info('üì§ Sending CPQ quote to Zoho', {
      quoteNumber,
      lineItems: lineItems.length,
      generators: generators.length,
      total: `$${total.toFixed(2)}`
    });

    const response = await axios.post(
      `${zohoConfig.apiUrl}/crm/v2/Quotes`,
      { data: [quotePayload] },
      {
        headers: {
          'Authorization': `Zoho-oauthtoken ${zohoConfig.accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const quoteId = response.data?.data?.[0]?.details?.id ||
                    response.data?.data?.[0]?.id ||
                    response.data?.id;

    if (!quoteId) {
      throw new Error('Failed to get quote ID from Zoho response');
    }

    logger.info(`‚úÖ CPQ Quote created: ${quoteId}`);

    return {
      id: quoteId,
      quoteNumber,
      subject: quotePayload.Subject,
      total,
      lineItems: lineItems.length,
      url: `${zohoConfig.apiUrl.replace('/api', '')}/crm/org/tab/Quotes/${quoteId}`
    };

  } catch (error) {
    logger.error('‚ùå CPQ quote creation failed:', error.message);
    throw error;
  }
}

/**
 * Build CPQ quote description with full transparency
 * @param {Object} quoteData - Quote data
 * @param {Array} generators - Generator array
 * @param {Object} customerData - Customer information
 * @param {Object} features - Advanced features (taxRate, isPrevailingWage, mobilization stacking, etc.)
 */
function buildCPQQuoteDescription(quoteData, generators, customerData, features = {}) {
  const parts = [];

  parts.push('üîß GENERATOR SERVICE MAINTENANCE QUOTE');
  parts.push('Generated by Energen Calculator v5.0 with Zoho CPQ Integration');
  parts.push('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

  // Generator information
  parts.push('\nüìã EQUIPMENT DETAILS:');
  generators.forEach((gen, idx) => {
    const specs = extractGeneratorSpecs(gen);
    parts.push(`\n  Unit ${idx + 1}:`);
    parts.push(`    ‚Ä¢ Rating: ${specs.kwRating}kW (${specs.kwRange} range)`);
    parts.push(`    ‚Ä¢ Model: ${specs.model}`);
    if (specs.serialNumber) parts.push(`    ‚Ä¢ Serial: ${specs.serialNumber}`);
    if (specs.fuelType) parts.push(`    ‚Ä¢ Fuel: ${specs.fuelType}`);
    if (specs.cylinders) parts.push(`    ‚Ä¢ Cylinders: ${specs.cylinders}`);
    if (specs.injectorType) parts.push(`    ‚Ä¢ Injectors: ${specs.injectorType}`);
  });

  // Services summary - BUG FIX: Use calculation.serviceBreakdown for pricing
  const servicesArray = quoteData.services;
  const serviceBreakdown = quoteData.calculation?.serviceBreakdown || {};

  if (servicesArray && servicesArray.length > 0) {
    parts.push('\n\nüì¶ SERVICES INCLUDED:');
    servicesArray.forEach(serviceCode => {
      // Find service pricing from calculator output
      const serviceKey = Object.keys(serviceBreakdown).find(key =>
        key === serviceCode || key.startsWith(serviceCode + ' -')
      );
      const breakdownData = serviceKey ? serviceBreakdown[serviceKey] : null;

      if (breakdownData) {
        const serviceName = breakdownData.name || `Service ${serviceCode}`;
        const freq = breakdownData.frequency || 1;
        const totalCost = breakdownData.totalCost || breakdownData.total || 0;
        const price = freq > 0 ? totalCost / freq : totalCost;

        const freqName = { 4: 'Quarterly', 2: 'Semi-Annual', 1: 'Annual', 0.33: 'Triennial', 0.2: 'Pentennial' }[freq] || 'Annual';
        parts.push(`    ‚Ä¢ ${serviceName} (${freqName})`);
        parts.push(`      ${freq} visits @ $${price.toFixed(2)}/visit = $${totalCost.toFixed(2)}`);
      }
    });
  }

  // Advanced features breakdown
  if (features.mobilizationStackingApplied) {
    parts.push('\n\nüí° MOBILIZATION STACKING:');
    parts.push('    ‚úÖ Multiple services on same day');
    if (features.mobilizationDiscount) {
      parts.push(`    Discount: $${features.mobilizationDiscount.toFixed(2)} (35% off additional trips)`);
    }
    parts.push('    Benefit: Reduced travel costs when combining services');
  }

  // Pricing breakdown
  if (quoteData.calculation) {
    parts.push('\n\nüí∞ PRICING SUMMARY:');
    parts.push(`    Subtotal: $${quoteData.calculation.subtotal?.toFixed(2) || '0.00'}`);

    // Distance charge
    if (quoteData.calculation.distanceCharge) {
      parts.push(`    Travel/Distance: $${quoteData.calculation.distanceCharge.toFixed(2)} (${quoteData.calculation.distance || 0} mi @ $${quoteData.calculation.mileageRate || 0.67}/mi)`);
    }

    // Tax information with live rate
    if (features.isPrevailingWage) {
      parts.push('    Tax: $0.00 (TAX-EXEMPT: Prevailing Wage Project)');
    } else {
      const taxRatePercent = ((features.actualTaxRate || features.taxRate || 0.0925) * 100).toFixed(2);
      parts.push(`    Tax (${taxRatePercent}%): $${quoteData.calculation.salesTax?.toFixed(2) || '0.00'}`);

      // Show if live tax rate was used
      if (features.actualTaxRate && customerData?.city) {
        parts.push(`    üìç Live Rate: ${customerData.city}, ${customerData.state || 'CA'}`);
      }
    }

    parts.push('    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    parts.push(`    TOTAL: $${quoteData.calculation.total?.toFixed(2) || '0.00'}`);
  }

  // Special features callouts
  const specialFeatures = [];
  if (features.actualTaxRate) {
    specialFeatures.push('‚úÖ Live CDTFA Tax Rate Lookup');
  }
  if (features.isPrevailingWage) {
    specialFeatures.push('‚úÖ Prevailing Wage Compliant (Tax-Exempt)');
  }
  if (features.mobilizationStackingApplied) {
    specialFeatures.push('‚úÖ Mobilization Stacking Optimization');
  }
  if (customerData?.logoUrl || quoteData.metadata?.logoAttached) {
    specialFeatures.push('‚úÖ Company Logo Included');
  }

  if (specialFeatures.length > 0) {
    parts.push('\n\n‚≠ê ADVANCED FEATURES APPLIED:');
    specialFeatures.forEach(feature => {
      parts.push(`    ${feature}`);
    });
  }

  parts.push('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  parts.push(`\nQuote Date: ${new Date().toLocaleString()}`);
  parts.push('Valid for 30 days from quote date');

  return parts.join('\n');
}

/**
 * Main function: Create complete CPQ bid in Zoho CRM
 * Uses calculator pricing and CPQ product catalog
 *
 * @param {Object} zohoConfig - Zoho configuration with accessToken and apiUrl
 * @param {Object} quoteData - Complete quote data from frontend WITH calculator results
 * @param {Object} logger - Logger instance
 * @returns {Promise<Object>} Complete sync result
 */
async function createCPQBidInZoho(zohoConfig, quoteData, logger) {
  logger.info('üöÄ Starting Zoho CPQ bid creation with calculator pricing');

  try {
    // Step 1: Create/Update Account
    const accountResult = await createOrUpdateAccount(
      zohoConfig,
      quoteData.customer || quoteData.quoteData?.customer,
      logger
    );

    // Step 2: Create/Update Contact
    const contactResult = await createOrUpdateContact(
      zohoConfig,
      accountResult.id,
      quoteData.customer || quoteData.quoteData?.customer,
      logger
    );

    // Step 3: Create CPQ Quote with calculator pricing
    const customerData = quoteData.customer || quoteData.quoteData?.customer;
    const quoteResult = await createCPQQuote(
      zohoConfig,
      accountResult.id,
      contactResult.id,
      quoteData.quoteData || quoteData,
      customerData,
      logger
    );

    // Step 4: Upload company logo as attachment (if provided)
    let logoResult = null;
    if (customerData?.logoUrl || customerData?.companyLogoUrl) {
      try {
        logger.info('üì∏ Uploading company logo to quote...');
        logoResult = await uploadLogoAttachment(
          zohoConfig,
          quoteResult.id,
          'Quotes',
          customerData.logoUrl || customerData.companyLogoUrl,
          customerData.companyName || 'Company',
          logger
        );
        logger.info('‚úÖ Company logo uploaded successfully');
      } catch (logoError) {
        logger.warn('‚ö†Ô∏è  Logo upload failed (non-critical):', logoError.message);
        // Don't fail the entire operation if logo upload fails
      }
    }

    logger.info('üéâ Zoho CPQ bid creation completed successfully');

    return {
      success: true,
      cpqEnabled: true,
      account: accountResult,
      contact: contactResult,
      quote: quoteResult,
      logo: logoResult,
      estimateNumber: quoteResult.quoteNumber,
      zohoUrl: quoteResult.url
    };

  } catch (error) {
    logger.error('‚ùå Zoho CPQ bid creation failed:', error);
    throw error;
  }
}

module.exports = {
  createCPQBidInZoho,
  createCPQQuote,
  findOrCreateCPQProduct,
  extractGeneratorSpecs,
  buildProductCode,
  buildProductName,
  determineKwRange
};
