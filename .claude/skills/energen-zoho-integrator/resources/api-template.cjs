/**
 * Zoho {MODULE_DISPLAY_NAME} API
 * Manages {MODULE_DISPLAY_NAME} records in Zoho CRM
 *
 * Generated by energen-zoho-integrator skill
 * Pattern based on zoho-generator-asset-api.cjs
 * @generated {YEAR}
 */

const fetch = require('node-fetch');
require('dotenv').config();

class Zoho{MODULE_PASCAL_CASE}API {
    constructor(logger = null) {
        this.logger = logger || console;
        this.clientId = process.env.ZOHO_CLIENT_ID;
        this.clientSecret = process.env.ZOHO_CLIENT_SECRET;
        this.refreshToken = process.env.ZOHO_REFRESH_TOKEN;
        this.apiDomain = process.env.ZOHO_API_DOMAIN || 'https://www.zohoapis.com';
        this.accountsUrl = process.env.ZOHO_ACCOUNTS_URL || 'https://accounts.zoho.com';
        this.accessToken = null;
        this.tokenExpiry = null;
        this.tokenRefreshPromise = null;

        // Module name in Zoho CRM
        this.moduleName = '{MODULE_NAME}';
    }

    /**
     * Get or refresh access token
     * Promise-based locking prevents concurrent token refreshes
     */
    async getAccessToken() {
        if (this.accessToken && this.tokenExpiry && new Date() < this.tokenExpiry) {
            return this.accessToken;
        }

        if (this.tokenRefreshPromise) {
            return this.tokenRefreshPromise;
        }

        this.tokenRefreshPromise = (async () => {
            try {
                const tokenUrl = `${this.accountsUrl}/oauth/v2/token`;
                const params = new URLSearchParams({
                    refresh_token: this.refreshToken,
                    client_id: this.clientId,
                    client_secret: this.clientSecret,
                    grant_type: 'refresh_token'
                });

                const response = await fetch(tokenUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: params
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    this.logger.error('Token refresh failed:', response.status, errorText);
                    this.accessToken = null;
                    this.tokenExpiry = null;
                    throw new Error(`Token refresh failed: ${response.status}`);
                }

                const data = await response.json();
                this.accessToken = data.access_token;
                this.tokenExpiry = new Date(Date.now() + ((data.expires_in - 300) * 1000));

                return this.accessToken;
            } catch (error) {
                this.logger.error('‚ùå Failed to refresh Zoho access token:', error.message);
                throw error;
            } finally {
                this.tokenRefreshPromise = null;
            }
        })();

        return this.tokenRefreshPromise;
    }

    /**
     * Make authenticated API request to Zoho CRM with retry logic
     */
    async makeApiRequest(endpoint, method = 'GET', body = null, maxRetries = 3) {
        const baseDelay = 1000;
        let lastError;

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                const token = await this.getAccessToken();
                const url = `${this.apiDomain}/crm/v6${endpoint}`;

                const options = {
                    method,
                    headers: {
                        'Authorization': `Zoho-oauthtoken ${token}`,
                        'Content-Type': 'application/json'
                    }
                };

                if (body && method !== 'GET') {
                    options.body = JSON.stringify(body);
                }

                this.logger.info(`üîÑ Zoho API Request: ${method} ${endpoint} (attempt ${attempt}/${maxRetries})`);
                const response = await fetch(url, options);

                if (!response.ok) {
                    const errorText = await response.text();
                    this.logger.error(`‚ùå Zoho API Error: ${response.status}`, errorText);

                    // Don't retry on client errors (except 429 rate limit)
                    if (response.status >= 400 && response.status < 500 && response.status !== 429) {
                        throw new Error(`API request failed: ${response.status}`);
                    }

                    // Don't retry on auth errors
                    if (response.status === 401) {
                        throw new Error('Authentication failed: Invalid or expired token');
                    }

                    lastError = new Error(`API request failed: ${response.status}`);

                    // Don't wait after last attempt
                    if (attempt === maxRetries) {
                        break;
                    }

                    // Exponential backoff: 1s, 2s, 4s
                    const delay = baseDelay * Math.pow(2, attempt - 1);
                    this.logger.warn(`‚ö†Ô∏è  Retry ${attempt}/${maxRetries} after ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                    continue;
                }

                return await response.json();
            } catch (error) {
                lastError = error;

                if (attempt === maxRetries) {
                    break;
                }

                // Only retry on network errors or server errors
                if (!error.message.includes('failed:')) {
                    throw error;
                }

                const delay = baseDelay * Math.pow(2, attempt - 1);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }

        this.logger.error(`‚ùå All ${maxRetries} attempts failed`);
        throw lastError;
    }

    /**
     * Create a new {MODULE_DISPLAY_NAME} record
{PARAM_DOCS}
     * @returns {Promise<Object>} Creation result with record ID
     */
    async create{MODULE_PASCAL_CASE}(recordData) {
        const record = {
            data: [{
{FIELD_MAPPINGS}
            }]
        };

        try {
            this.logger.info('üìù Creating {MODULE_DISPLAY_NAME} in Zoho CRM...');
            const result = await this.makeApiRequest(`/${this.moduleName}`, 'POST', record);

            if (result.data && result.data[0]) {
                const created = result.data[0];
                this.logger.info(`‚úÖ {MODULE_DISPLAY_NAME} created: ${created.details.id}`);
                return {
                    success: true,
                    recordId: created.details.id,
                    data: created.details
                };
            }

            throw new Error('Unexpected response format from Zoho');
        } catch (error) {
            this.logger.error('‚ùå Failed to create {MODULE_DISPLAY_NAME}:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Update an existing {MODULE_DISPLAY_NAME} record
     */
    async update{MODULE_PASCAL_CASE}(recordId, updates) {
        const record = {
            data: [{
                id: recordId,
                ...updates
            }]
        };

        try {
            this.logger.info(`üìù Updating {MODULE_DISPLAY_NAME} ${recordId}...`);
            const result = await this.makeApiRequest(`/${this.moduleName}`, 'PUT', record);

            if (result.data && result.data[0]) {
                this.logger.info(`‚úÖ {MODULE_DISPLAY_NAME} updated: ${recordId}`);
                return {
                    success: true,
                    recordId: recordId,
                    data: result.data[0]
                };
            }

            throw new Error('Unexpected response format from Zoho');
        } catch (error) {
            this.logger.error(`‚ùå Failed to update {MODULE_DISPLAY_NAME} ${recordId}:`, error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Get {MODULE_DISPLAY_NAME} record by ID
     */
    async get{MODULE_PASCAL_CASE}(recordId) {
        try {
            this.logger.info(`üîç Fetching {MODULE_DISPLAY_NAME} ${recordId}...`);
            const result = await this.makeApiRequest(`/${this.moduleName}/${recordId}`, 'GET');

            if (result.data && result.data[0]) {
                return {
                    success: true,
                    record: result.data[0]
                };
            }

            throw new Error('Record not found');
        } catch (error) {
            this.logger.error(`‚ùå Failed to fetch {MODULE_DISPLAY_NAME} ${recordId}:`, error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Delete {MODULE_DISPLAY_NAME} record
     */
    async delete{MODULE_PASCAL_CASE}(recordId) {
        try {
            this.logger.info(`üóëÔ∏è  Deleting {MODULE_DISPLAY_NAME} ${recordId}...`);
            await this.makeApiRequest(`/${this.moduleName}/${recordId}`, 'DELETE');

            this.logger.info(`‚úÖ {MODULE_DISPLAY_NAME} deleted: ${recordId}`);
            return {
                success: true,
                recordId: recordId
            };
        } catch (error) {
            this.logger.error(`‚ùå Failed to delete {MODULE_DISPLAY_NAME} ${recordId}:`, error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Search {MODULE_DISPLAY_NAME} records
     */
    async search{MODULE_PASCAL_CASE}(searchTerm, criteria = null) {
        try {
            this.logger.info(`üîç Searching {MODULE_DISPLAY_NAME} for: ${searchTerm}...`);

            let endpoint = `/${this.moduleName}/search`;

            if (criteria) {
                const criteriaStr = this.buildSearchCriteria(criteria);
                endpoint += `?criteria=${encodeURIComponent(criteriaStr)}`;
            } else {
                endpoint += `?word=${encodeURIComponent(searchTerm)}`;
            }

            const result = await this.makeApiRequest(endpoint, 'GET');

            return {
                success: true,
                records: result.data || []
            };
        } catch (error) {
            this.logger.error(`‚ùå Failed to search {MODULE_DISPLAY_NAME}:`, error.message);
            return {
                success: false,
                error: error.message,
                records: []
            };
        }
    }

    /**
     * Build search criteria string from object
     */
    buildSearchCriteria(criteria) {
        const conditions = [];

        Object.keys(criteria).forEach(field => {
            const value = criteria[field];
            if (typeof value === 'object' && value.operator) {
                conditions.push(`(${field}:${value.operator}:${value.value})`);
            } else {
                conditions.push(`(${field}:equals:${value})`);
            }
        });

        return conditions.join('and');
    }
}

module.exports = Zoho{MODULE_PASCAL_CASE}API;
